hosts:
  - "{XMPP_DOMAIN}"
  - "guest.{XMPP_DOMAIN}"
  - "auth.{XMPP_DOMAIN}"
  - "recorder.{XMPP_DOMAIN}"
  - "speakerstats.{XMPP_DOMAIN}"
  - "lobby.{XMPP_DOMAIN}"

loglevel: 4

certfiles:
  - "/home/ejabberd/conf/server.pem"

ca_file: "/home/ejabberd/conf/cacert.pem"

host_config:
  {XMPP_DOMAIN}:
    auth_method: [anonymous, internal]
    allow_multiple_connections: true
    anonymous_protocol: both
  guest.{XMPP_DOMAIN}:
    auth_method: anonymous
    allow_multiple_connections: true
    anonymous_protocol: both
  auth.{XMPP_DOMAIN}:
    auth_method: [internal]
    auth_password_format: scram
  recorder.{XMPP_DOMAIN}:
    auth_method: [internal]
    auth_password_format: scram
  speakerstats.{XMPP_DOMAIN}:
    auth_method: anonymous
    allow_multiple_connections: true
    anonymous_protocol: both

append_host_config:
  {MUC_DOMAIN}:
    modules:
      mod_jwt_token:
        enable_jwt: true
        jwt_secret: "{JWT_SECRET}"
      mod_muc_meeting_id: {}
      mod_conference_duration: {}
      mod_speakerstats: {}
      mod_site_license:
        vmeeting_api_token: b1222956f9294783bad8c99e59f1255d
        xmpp_domain: devmeet.vmeeting.kr
      mod_participant_log: {}
  guest.{MUC_DOMAIN}:
    modules:
      mod_muc_lobby_rooms: {}
  lobby.{MUC_DOMAIN}:
    modules:
      mod_muc_lobby_rooms: {}

s2s_use_starttls: optional
disable_sasl_mechanisms: ["X-OAUTH2"]

listen:
  -
    port: 5222
    ip: "0.0.0.0"
    module: ejabberd_c2s
    starttls_required: false
    tls_compression: false

  -
    port: 5280
    ip: "0.0.0.0"
    module: ejabberd_http
    tls: false
    request_handlers:
      "/xmpp-websocket": ejabberd_http_ws
      "/conferences": mod_site_license

acl:
  local:
    user_regexp: ""
  loopback:
    ip:
      - 127.0.0.0/8
      - ::1/128
      - ::FFFF:127.0.0.1/128
  admin:
    user:
      - "admin@localhost"
      - "admin@xmpp.{XMPP_DOMAIN}"
      - "admin@auth.{XMPP_DOMAIN}"
      - "jvb@auth.{XMPP_DOMAIN}"
      - "focus@auth.{XMPP_DOMAIN}"

access_rules:
  local:
    allow: all
  c2s:
    deny: blocked
    allow: all
  announce:
    allow: admin
  configure:
    allow: admin
  muc_create:
    allow: local
  pubsub_createnode:
    allow: local
  register:
    - allow
  trusted_network:
    allow:
      ip: "127.0.0.1"

api_permissions:
  "console commands":
    from:
      - ejabberd_ctl
    who: all
    what: "*"
  "admin access":
    who:
      access:
        allow:
          ip: "0.0.0.0"
          acl: admin
      oauth:
        scope: "ejabberd:admin"
        access:
          allow:
            acl: loopback
            acl: admin
    what:
      - "*"
      - "!stop"
      - "!start"
  "public commands":
    who: all
    what:
      - "*"

max_fsm_queue: 100000
cache_size: 10000
websocket_ping_interval: 300
websocket_timeout: 500
registration_timeout: 1

modules:
  mod_adhoc: {}
  mod_admin_extra: {}
  mod_announce:
    access: announce
  mod_avatar: {}
  mod_blocking: {}
  # mod_bosh: {}
  mod_caps: {}
  mod_carboncopy: {}
  mod_client_state: {}
  mod_configure: {}
  mod_disco: {}
  # mod_fail2ban: {}
  # mod_http_api: {}
  # mod_http_upload:
  #   put_url: https://@HOST@:5443/upload
  mod_last: {}
  mod_mam:
    default: always
  #   ## Mnesia is limited to 2GB, better to use an SQL backend
  #   ## For small servers SQLite is a good fit and is very easy
  #   ## to configure. Uncomment this when you have SQL configured:
  #   assume_mam_usage: true
  #   default: never
  # mod_mqtt: {}
  mod_muc:
    host: "{XMPP_MUC_DOMAIN}"
    hosts:
      - "internal-muc.{XMPP_DOMAIN}"
      - "muc.{XMPP_DOMAIN}"
    access:
      - allow
    access_admin:
      - allow: admin
      - allow: focus
    access_create: muc_create
    access_persistent: muc_create
    max_users: 1000
    default_room_options:
      max_users: 1000
      allow_subscription: true  # enable MucSub
      anonymous: true
      allow_user_invites: true
      mam: false
      allow_change_subj: true
      allow_private_messages: true
      members_by_default: true
  mod_muc_admin: {}
  # mod_muc_log: {}
  # mod_offline:
  #   access_max_user_messages: max_user_offline_messages
  mod_ping: {}
  mod_privacy: {}
  mod_private: {}
  # mod_proxy65:
  #   access: local
  #   max_connections: 5
  mod_pubsub:
    access_createnode: pubsub_createnode
    plugins:
      - flat
      - pep
    force_node_config:
      ## Avoid buggy clients to make their bookmarks public
      storage:bookmarks:
        access_model: whitelist
  # mod_push: {}
  # mod_push_keepalive: {}
  mod_register:
    ## Only accept registration requests from the "trusted"
    ## network (see access_rules section above).
    ## Think twice before enabling registration from any
    ## address. See the Jabber SPAM Manifesto for details:
    ## https://github.com/ge0rg/jabber-spam-fighting-manifesto
    ip_access: trusted_network
  mod_roster:
    versioning: true
  # mod_s2s_dialback: {}
  mod_shared_roster: {}
  # TODO: mod_stream_mgmt cause ghost users. It also does not needed
  # in jitsi with prosody
  # mod_stream_mgmt:
  #   resend_on_timeout: if_offline
  #   resume_timeout: 1 min
  mod_vcard: {}
  mod_vcard_xupdate: {}
  mod_version:
    show_os: false
  mod_muc_domain_mapper: {}
